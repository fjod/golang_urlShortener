// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	db "shortUrl/db"

	mock "github.com/stretchr/testify/mock"
)

// Operations is an autogenerated mock type for the Operations type
type Operations struct {
	mock.Mock
}

// CreateTable provides a mock function with given fields:
func (_m *Operations) CreateTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUrl provides a mock function with given fields: id
func (_m *Operations) GetUrl(id int) (db.Url, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUrl")
	}

	var r0 db.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (db.Url, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) db.Url); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Url)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlId provides a mock function with given fields:
func (_m *Operations) GetUrlId() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUrlId")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUrl provides a mock function with given fields: _a0, _a1
func (_m *Operations) SetUrl(_a0 string, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperations creates a new instance of Operations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Operations {
	mock := &Operations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
